trigger:
- main  # Or your desired branch

pool:
  vmImage: ubuntu-latest

variables:
  pythonVersion: '3.13'
  artifactName: 'python-app'
  zipName: 'release1.zip'
  appFolder: 'scholas-api'  # adjust this if your app is in a different folder
  appName: 'testpython123'
  resourceGroup: 'test-scolas-app'

stages:

# ==============================
# 🔨 BUILD STAGE
# ==============================

- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - checkout: self

    - script: |
        echo "📁 Listing repo contents for debug"
        ls -al
      displayName: 'List all files'

    - script: |
        if [ ! -f "$(appFolder)/requirements.txt" ]; then
          echo "❌ requirements.txt not found in $(appFolder)!"
          exit 1
        fi
      displayName: '✅ Check for requirements.txt'

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true
      displayName: '🐍 Set up Python'

    - script: |
        python -m venv venv
        source venv/bin/activate
      displayName: '📦 Create and activate virtual environment'

    - script: |
        cd $(appFolder)
        pip install -r requirements.txt
        pip install uvicorn
      displayName: '⬇️ Install dependencies and uvicorn'

    - script: |
        cd $(appFolder)
        zip -r $(Build.ArtifactStagingDirectory)/$(zipName) .
      displayName: '📦 Zip app contents'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(zipName)'
        ArtifactName: '$(artifactName)'
        publishLocation: 'Container'
      displayName: '🚀 Publish ZIP artifact'

# ==============================
# 🚀 DEPLOY STAGE
# ==============================

- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment: DeployJob
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: $(artifactName)

          - task: AzureWebApp@1
            displayName: '🚀 Deploy to Azure Web App'
            inputs:
              azureSubscription: 'azure-arm-coonection'
              appType: 'webAppLinux'  # use 'webApp' if you're on Windows App Service Plan
              appName: '$(appName)'
              package: '$(Pipeline.Workspace)/$(artifactName)/$(zipName)'

          - task: AzureAppServiceSettings@1
            displayName: '⚙️ Set Startup Command'
            inputs:
              azureSubscription: 'azure-arm-coonection'
              appName: '$(appName)'
              resourceGroupName: '$(resourceGroup)'
              configurationStrings: '-startupFile "python3 -m uvicorn models:app --host 0.0.0.0 --port 8000"'
              appSettings: |
                -WEBSITES_PORT=8000

